#pragma kernel CSMain

int rangeSizeX;
int rangeSizeY;
int rangeSizeZ;
StructuredBuffer<int> bufferIn;
RWStructuredBuffer<int> bufferOut;

[numthreads(64, 1, 1)]
void CSMain(uint id : SV_DispatchThreadID)
{
	//bufferOut[id] = bufferIn[id];

	int tempx = id / (rangeSizeY * rangeSizeZ);
	int tempy = (id - tempx * (rangeSizeY * rangeSizeZ)) / rangeSizeZ;
	int tempz = (id - tempx * (rangeSizeY * rangeSizeZ) - tempy * rangeSizeZ);

	if (tempx > 0 && tempx < rangeSizeX - 1) {
		if (tempy > 0 && tempy < rangeSizeY - 1) {
			if (tempz > 0 && tempy < rangeSizeZ - 1) {

				int sum = 0;
				sum += bufferIn[((tempx) * (rangeSizeY * rangeSizeZ) + (tempy) * (rangeSizeZ) + (tempz))];
				sum += bufferIn[((tempx + 1) * (rangeSizeY * rangeSizeZ) + (tempy) * (rangeSizeZ) + (tempz))];
				sum += bufferIn[((tempx - 1) * (rangeSizeY * rangeSizeZ) + (tempy) * (rangeSizeZ) + (tempz))];
				sum += bufferIn[((tempx) * (rangeSizeY * rangeSizeZ) + (tempy + 1) * (rangeSizeZ) + (tempz))];
				sum += bufferIn[((tempx) * (rangeSizeY * rangeSizeZ) + (tempy - 1) * (rangeSizeZ) + (tempz))];
				sum += bufferIn[((tempx) * (rangeSizeY * rangeSizeZ) + (tempy) * (rangeSizeZ) + (tempz + 1))];
				sum += bufferIn[((tempx) * (rangeSizeY * rangeSizeZ) + (tempy) * (rangeSizeZ) + (tempz - 1))];

				bufferOut[((tempx) * (rangeSizeY * rangeSizeZ) + (tempy) * (rangeSizeZ) + (tempz))] = sum / 7;
			}
		}
	}

}