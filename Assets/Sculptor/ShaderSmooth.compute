#pragma kernel CSMain

int range;
StructuredBuffer<int> bufferIn;
RWStructuredBuffer<int> bufferOut;

[numthreads(256, 1, 1)]
void CSMain(uint id : SV_DispatchThreadID)
{
	//bufferOut[id] = bufferIn[id];

	int tempx = id / (range * range * 4);
	int tempy = (id - tempx * (range * range * 4)) / (range * 4);
	int tempz = (id - tempx * (range * range * 4) - tempy * (range * 4)) / 4;
	int tempw = id - tempx * (range * range * 4) - tempy * (range * 4) - tempz * 4;

	if (tempx > 0 && tempx < range - 1) {
		if (tempy > 0 && tempy < range - 1) {
			if (tempz > 0 && tempy < range - 1) {

				int sum = 0;
				sum += bufferIn[((tempx) * (range * range * 4) + (tempy) * (range * 4) + (tempz) * 4 + tempw) ];
				sum += bufferIn[((tempx + 1) * (range * range * 4) + (tempy) * (range * 4) + (tempz) * 4 + tempw)];
				sum += bufferIn[((tempx - 1) * (range * range * 4) + (tempy) * (range * 4) + (tempz) * 4 + tempw)];
				sum += bufferIn[((tempx) * (range * range * 4) + (tempy + 1) * (range * 4) + (tempz) * 4 + tempw)];
				sum += bufferIn[((tempx) * (range * range * 4) + (tempy - 1) * (range * 4) + (tempz) * 4 + tempw)];
				sum += bufferIn[((tempx) * (range * range * 4) + (tempy) * (range * 4) + (tempz + 1) * 4 + tempw)];
				sum += bufferIn[((tempx) * (range * range * 4) + (tempy) * (range * 4) + (tempz - 1) * 4 + tempw)];

				bufferOut[id] = sum / 7;
			}
		}
	}

}